enum Role {
  ADMIN
  MEMBER
}

enum MessageStatus {
  DRAFT
  PENDING
  SENT
  FAILED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  COMPLETED
  FAILED
}

model Team {
  id                    String           @id @default(cuid())
  name                  String
  slug                  String           @unique
  logoUrl               String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  members               TeamMember[]     // Relation to team memberships
  campaigns             Campaign[]       // Teams can now own campaigns
  messageTemplates      MessageTemplate[] // Teams can now own message templates
  contacts              Contact[]    // Teams can now own phone numbers
}

model TeamMember {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  userId    String
  teamId    String
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}


model Campaign {
  id                    String          @id @default(cuid())
  title                 String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  status                CampaignStatus  @default(DRAFT)
  scheduledAt           DateTime?
  completedAt           DateTime?
  teamId                String
  templateId            String
  userId                String
  messagingServiceSID   String?     // Twilio messaging service SID for this campaign
  alphanumericSenderId        String? @db.VarChar(11) // Twilio alphanumeric sender ID eg. "PizzaShop"
  team                  Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  template              MessageTemplate @relation(fields: [templateId], references: [id])
  user                  User            @relation(fields: [userId], references: [id])
  messages              Message[]
}

model MessageTemplate {
  id        String     @id @default(cuid())
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  teamId    String
  userId    String
  messages  Message[]
  campaigns Campaign[]
  user      User       @relation(fields: [userId], references: [id])
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model Message {
  id           String         @id @default(cuid())
  message      String?
  status       MessageStatus  @default(DRAFT)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sentAt       DateTime?
  errorMessage String?

  templateId   String?
  template     MessageTemplate?  @relation(fields: [templateId], references: [id])
  withTemplate Boolean        @default(false)

  campaignId   String
  recipientId  String
  campaign     Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  recipient    Contact        @relation(fields: [recipientId], references: [id], onDelete: Cascade)
} 

model Contact {
  id                String    @id @default(cuid())
  phone             String
  displayName       String?  // Name to display to the recipient eg. "John" (external use)
  contactLabel      String?  // Label of the contact eg. "John Doe - Pizza" (internal use)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  teamId            String
  messages          Message[]
  user              User      @relation(fields: [userId], references: [id])
  team              Team      @relation(fields: [teamId], references: [id])

  @@unique([teamId, phone])
}
